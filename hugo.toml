baseURL = "http://nanana-szz.github.io/"   # 站点根地址，由于要部署到 GitHub Pages ， 所以设为 GitHub Pages 的地址。末尾必须带‘/’
title = "Zhenzhuo Shan's Blog"           # 站点标题，会显示在浏览器标签页、RSS订阅、HTML等地方        
enableRobotsTXT = true                     # 启用 robots.txt 文件，允许 hugo 生成 robots.txt 文件。robots.txt 用于告诉搜索引擎爬虫哪些页面可以或不可以被索引
enableEmoji = true                         # 启用 emoji 支持，允许在 Markdown 文档中使用 emoji 语法
theme = "jane"                             # 指定 Hugo 站点使用的主题。 jane 主题将用于渲染博客页面的样式和布局

hasCJKLanguage = true     # 自动检测是否包含 中文\日文\韩文 ， CJK 语言的特点是没有空格分隔单词，因此 Hugo 可能会调整字数统计和摘要截取的方式，以适应这些语言的需求 
paginate = 3              # 首页每页显示的文章数，若超过， Hugo 将自动生成分页
rssLimit = 20             # 设置 Rss 订阅源最多显示的文章数量
disqusShortname = ""      # 配置 Disqus 评论系统(外部托管的评论系统，适用于静态网站)的短名称 shortname 。 为空 ""，则不启用 
googleAnalytics = ""      # 若填写有效的 UA-XXXXXXXX-X ，Hugo 会自动在网站 <head> 部分插入 Google Analytics 追踪代码，帮助监测流量数据
copyright = ""            # 用于在网站底部显示版权信息，为空则默认为下面配置的params.author.name ↓
enableGitInfo = true      # 可根据 Git 中的提交生成最近更新记录。
# uglyURLs = true         # more info: https://gohugo.io/content-management/urls/#ugly-urls ， true 时，启用 .html 结尾的URL，更适用于某些静态服务器（如 Apache）

[pagination]
  pagerSize = 5           # 首页每页显示的文章数

# Enable author pages
#[taxonomies]             # 启用分类、标签和作者页
#  author = "author"
#  tag = "tags"
#  category = "categories"

# 可以增加其它语言的配置 # en / zh-cn / other... 在 i18n 目录下放置对应语言的翻译文件
defaultContentLanguage = "en"           # 设置默认内容语言
[languages.en]                          # 指定英文语言的详细配置，如 languageCode 也设置为 "en"
  languageCode = "en"

# defaultContentLanguage = "zh-cn"           
# [languages.zh-cn]
#   languageCode = "zh-cn"

[sitemap]                               # 生成网站地图，帮助搜索引擎更好地抓取网站内容
  changefreq = "weekly"                 # 建议搜索引擎每周更新一次页面（"weekly"）
  priority = 0.5                        # 页面的重要性默认设置为 0.5
  filename = "sitemap.xml"              # 生成的 sitemap 文件名为 "sitemap.xml"

# 定义网站的导航菜单
[[menu.main]]                           # 每个块表示菜单中的一项，main 表示主菜单
  name = "Home"                         # 菜单显示的名称
  weight = 10                           # 用于控制菜单项排序，数值越小越靠前
  identifier = "home"                   # 给菜单项指定一个唯一标识符，便于后续调用或样式定制。最后一项没有 identifier，因为可能只用于链接跳转
  pageref = "/"                         # 定义该菜单项对应的页面链接。前三个是相对路径，最后一个直接是一个外部链接
[[menu.main]]
  name = "Archives"
  weight = 20
  identifier = "archives"
  pageref = "/post/"
[[menu.main]]
  name = "Tags"
  weight = 30
  identifier = "tags"
  pageref = "/tags/"
[[menu.main]]
  name = "external-link"
  weight = 50
  pageref = "https://gohugo.io"


[params]
  debug = false             # 当设为 true 时，会加载 eruda.min.js （一个用于移动端调试的 JS 工具）。一般在生产环境下保持 false
  since = "2017"            # 站点建立的年份或时间，可用于页面底部显示“Since 2017”等信息
  homeFullContent = false   # 控制首页的内容展示方式：若为 false，首页显示的是文章摘要；若为 true 则显示文章全文。
  rssFullContent = true     # 设置 RSS 订阅的内容：若为 false， RSS 中只显示摘要；若为 true，RSS 中包含文章全文
  mainSections = ["post"]   # 定义网站主要内容所在的目录（例如文章所在的部分），通常用于归档和列表页生成

  author.name = "Zhenzhuo Shan"            # 必需，定义作者名称，显示在 About 页面
  author.email = "me@example.com"     # 可选，提供作者邮箱，通常在 RSS 中使用或作为联系信息
  author.url = "/about"               # 可选，指向作者详情页或 About 页面

  # 站点信息（可选，不需要的可以直接注释掉）
  logoTitle = "Zhenzhuo Shan's Blog"                      # 网站 logo 显示的文字，默认值通常会使用全局的 title，这里可以自定义
  keywords = ["Hugo", "theme","jane"]                     # 网站关键词，用于 SEO 搜索引擎优化
  description = "Hugo theme jane example site."           # 网站描述，同样有利于搜索引擎优化，可以在 meta 标签中使用
            
  archive-paginate = 10                                   # 归档、标签、分类每页显示的文章数目，建议修改为一个较大的值以减少分页页数

  # paginateOriginalStyle = true                          # 如果取消注释并设为 true，则分页样式会采用原始的 Previous 与 Next 链接风格，而非数字分页

  # The date format to use; for a list of valid formats, see https://gohugo.io/functions/format/
  dateFormatToUse = "2006-01-02"                          # 定义日期的显示格式。Hugo 使用类似 “2006-01-02” 这样的参考时间来格式化日期
                      
  moreMeta = true                                         # 是否显示字数统计与阅读时间

  showMenuLanguageChooser = true                          # 控制是否在菜单中显示语言选择器，适用于多语言站点

  showAuthorInfo = true                                   # 是否在文章页面下方显示作者信息

  wallpaper = "/static/img/wallpaper.jpg"                 # 指定网站全局背景壁纸的路径。既可以使用本地路径，也可替换成远程图片链接。注意：图片文件应尽量小以便快速加载
  # wallpaper = "https://followingmyfeet.com/wp-content/uploads/2018/02/825_2229-HDR.jpg"

  # 一些全局开关，你也可以在每一篇内容的 front matter 中针对单篇内容关闭或开启某些功能，在 archetypes/default.md 查看更多信息。
  toc = true                                              # 是否开启文章目录
  photoswipe = true         # see https://github.com/dimsemenov/PhotoSwipe              # 是否启用 PhotoSwipe ，使文章中的图片点击后能以全屏方式浏览
  bootcdn = false           # In china. @Deprecated: use [params.publicCDN]             # 是否使用 bootcdn 加速加载资源。该选项已被标记为过时，建议使用(@Deprecated: 请使用[params.publicCDN])
  mathjax = false           # see https://www.mathjax.org/                              # 是否启用 MathJax 以支持数学公式渲染
  katex = false             # see https://github.com/KaTeX/KaTeX                        # 是否启用 KaTeX，另一种数学公式渲染方案
  # 网站内容版权信息，这里以 HTML 形式设置，展示的是一个 CC BY-NC-ND 4.0 许可证链接
  contentCopyright = '<a rel="license noopener" href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank">CC BY-NC-ND 4.0</a>'

  # Link custom CSS and JS assets
  #   (relative to /static/css and /static/js respectively)
  customCSS = ['custom.css']            # if ['custom.css'], load '/static/css/custom.css' file. 列出自定义的 CSS 文件名称，允许用户扩展或覆盖默认样式
  customJS = []                         # if ['custom.js'], load '/static/js/custom.js' file. 列出自定义的 JS 文件名称，为空表示没有添加额外的 JS 脚本

  # 第三方服务配置
  changyanAppid = ""        
  changyanAppkey = ""       # 用于畅言评论系统的 App ID 和 App Key，如果使用畅言评论，则需要填写相应信息
  tencent_analytics = ""    # 腾讯 Analytics 的相关标识，用于网站统计分析
  baidu_push = false        # 控制是否启用百度推送，帮助百度快速收录网站内容
  baidu_analytics = ""      # 百度统计的标识码，用于数据分析
  baidu_verification = ""   # 百度站长工具验证信息
  google_verification = ""  # 谷歌站长工具验证信息，用于证明站点所有权

  # add custom info on the footer.   # 添加备案信息
  # customFooter = "京ICP备10000000号-1"

  # Remark42 is self-hosted privacy-focused comment system, https://remark42.com
  remark42Url = "https://remark42.example.com"              # 指定 Remark42 评论系统的服务地址
  remark42SiteId = "remark"                                 # 为 Remark42 指定站点 ID，用于区分不同网站的评论数据

  [params.commentCount.remark42]                            # 启用 Remark42 评论系统的评论数统计功能，要使用该功能需确保全局参数 moreMeta 已经开启（即 moreMeta = true）
    enable = true

  [params.publicCDN]        # 从公共 CDN 加载部分资源文件，避免直接托管文件在本地，需自行定义
    enable = false          # 设为 false，不会使用 CDN 加载资源；设为 true 则加载下面指定的文件
    # gitmentJS 与 gitmentCSS: 分别为 Gitment 评论系统所需的 JavaScript 与 CSS 代码，内嵌了相应的 <script> 与 <link> 标签
    gitmentJS = '<script src="https://cdn.jsdelivr.net/npm/gitment@0.0.3/dist/gitment.browser.min.js" crossorigin="anonymous"></script>'
    gitmentCSS = '<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/gitment@0.0.3/style/default.min.css" crossorigin="anonymous">'
    # photoswipe、photoswipeUI、photoswipeCSS、photoswipeSKIN: 分别为 PhotoSwipe 图片查看器的核心脚本、UI 脚本、样式表以及皮肤样式表代码，均指定了加载路径及安全性相关属性（如 integrity 与 crossorigin）
    photoswipe = '<script src="https://cdn.jsdelivr.net/npm/photoswipe@4.1.3/dist/photoswipe.js" integrity="sha256-AC9ChpELidrhGHX23ZU53vmRdz3FhKaN9E28+BbcWBw=" crossorigin="anonymous"></script>'
    photoswipeUI = '<script src="https://cdn.jsdelivr.net/npm/photoswipe@4.1.3/dist/photoswipe-ui-default.min.js" integrity="sha256-UKkzOn/w1mBxRmLLGrSeyB4e1xbrp4xylgAWb3M42pU=" crossorigin="anonymous"></script>'
    photoswipeCSS = '<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/photoswipe@4.1.3/dist/photoswipe.css" integrity="sha256-SBLU4vv6CA6lHsZ1XyTdhyjJxCjPif/TRkjnsyGAGnE=" crossorigin="anonymous">'
    photoswipeSKIN = '<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/photoswipe@4.1.3/dist/default-skin/default-skin.css" integrity="sha256-c0uckgykQ9v5k+IqViZOZKc47Jn7KQil4/MP3ySA3F8=" crossorigin="anonymous">'

  [params.giscus]         # 配置基于 GitHub Discussions 的 Giscus 评论系统. see https://giscus.app
    enable = false
    # repo 与 repoId: 指定存放评论的 GitHub 仓库及其对应的仓库 ID
    repo = "xianmin/comments-for-hugo-theme-jane"
    repoId = "MDEwOlJlcG9zaXRvcnkxNDAyNDYzNjc="
    # category 与 categoryId : 定义用于分类讨论的类别名称和其 ID，用于将页面与讨论主题关联
    category = "Announcements"
    categoryId = "DIC_kwDOCFv9X84CRRWF"
    # 其它参数目前被注释，代表使用默认设置。可根据需要取消注释并调整对应设置
    # mapping = "pathname"  # comment value is the default value
    # strict = 0
    # reactionsEnabled = 1
    # emitMetadata = 0
    # inputPosition = "top"
    # theme = "light"
    # lang = "en"
    # lazyLoading = false

  [params.utteranc]         # 配置基于 GitHub Issues 的 Utteranc 评论系统. see https://utteranc.es
    enable = false
    repo = "xianmin/comments-for-hugo-theme-jane"    # The repo to store comments
    issueTerm = "pathname"                           # 用来匹配评论对应页面的依据，此处设为 "pathname"，即通过页面路径匹配

  [params.commento]         # 配置 Commento 评论系统 Commento is a feature rich lightweight comment system oriented on privacy (https://commento.io/)
    enable = false
    url = "http://commento.example.com"              # 指定 Commento 服务器的地址，需替换为实际部署的地址

  [params.livere]          	# 用于配置 LiveRe 评论系统. see https://www.livere.com/
	  uid = ""                # LiveRe 用户标识（User ID），当前为空，需填写正确的 UID 才能启用

  # Valine.
  # You can get your appid and appkey from https://leancloud.cn
  # more info please open https://valine.js.org
  [params.valine]           # 配置 Valine 评论系统（基于 LeanCloud），适合需要无后端评论系统的场景
    enable = false
    appId = ''
    appKey = ''
    notify = false          # 是否开启通知功能，如果使用了 valine-admin (https://github.com/DesertsP/Valine-Admin) 管理评论则建议保持关闭 
    verify = false          # 是否开启验证码
    avatar = 'mm'           # 头像风格设置，这里设为 'mm' 表示默认头像
    placeholder = ''        # 评论输入框的占位文本，可根据需要设置

  [params.search.google]    # 配置 Google 自定义搜索引擎（CSE）google custom search, see https://cse.google.com
    enable = false
    id = "002186711602136249422:q1gkomof_em"
    title = "Search"        # 搜索框标题或按钮文字

  [params.reward]                                         # 文章打赏
    enable = false
    wechat = "/path/to/your/wechat-qr-code.png"           # 微信二维码
    alipay = "/path/to/your/alipay-qr-code.png"           # 支付宝二维码

  [params.counter.busuanzi]  # a Chinese visitor counter  # 配置“不蒜子”访问计数器，用于统计网站访客数量
    enable = false

  [params.counter.leancloud]  # Chinese leancloud visitor counter  # 配置基于 LeanCloud 的访问计数器
    enable = false
    appId = ""
    appKey = ""

  [params.commentCount.disqus] # 显示 Disqus 评论系统的评论数统计
    enable = false

  # 指定 git 仓库地址，可以生成指向最近更新的 git commit 的链接，需要将 enableGitInfo 设置成 true.
  [params.gitInfo]             # 配置 Git 信息显示功能，可以在页面中生成指向最近一次 Git 提交的链接
    gitRepo = "https://github.com/xianmin/hugo-theme-jane"
    showCommitMessage = true

  [params.social]                                         # 社交链接
    a-email = ""
    b-stack-overflow = ""
    c-twitter = ""
    d-facebook = ""
    e-linkedin = ""
    f-google = ""
    g-github = "http://localhost:1313"
    h-weibo = ""
    i-zhihu = ""
    j-douban = ""
    k-pocket = ""
    l-tumblr = ""
    m-instagram = ""
    n-gitlab = ""
    o-goodreads = ""
    p-coding = ""
    q-bilibili = ""
    r-codeforces = ""
    s-mastodon = ""
    t-youtube = ""
    u-twitch = ""

# JSON Feed 输出功能，便于将站点内容以 JSON 格式呈现
# more information: https://github.com/xianmin/hugo-theme-jane/issues/23
# to have json output it's necessary to uncomment this block of code and create a index.jsonfeed.json template, using hugo template specs
# [outputs]                                               # 定义不同类型页面的输出格式
#   home = ["html", "jsonfeed","rss"]                     # 对于首页（home），输出格式为 HTML、JSON Feed 和 RSS
#   page = ["html"]                                       # 对于普通页面（page），只输出 HTML 格式
# 
# [outputFormats]
# [outputFormats.jsonfeed]                                # 定义 JSON Feed 的输出格式
#   mediaType = "application/json"                        # 指定 MIME 类型
#   baseName = "feed"                                     # 生成的文件名将以 feed 开头
#   isPlainText = true                                    # 输出为纯文本格式（避免 Hugo 默认包装为 HTML）


# 如何配置多语言支持。通过在 [languages] 下分别配置不同语言的属性，可以实现站点的多语言功能
# [languages]
# [languages.en]
#   title = "Jane - A simple theme for Hugo"
#   weight = 1
# [languages.zh-cn]
#   title = "Jane —— 一个简洁的 Hugo 主题"
#   weight = 2


# more information https://gohugo.io/getting-started/configuration-markup/#goldmark
[markup]                                                   # 设置 Hugo 在解析 Markdown 内容时的相关参数，包括使用的 Markdown 解析器和代码语法高亮设置
  defaultMarkdownHandler = "goldmark"                      # 设置默认的 Markdown 解析器，这里选择了 goldmark （Hugo 的默认解析器），也可以选用 blackfriday  
  [markup.goldmark]
    [markup.goldmark.renderer]
      unsafe = true                                        # 允许在 Markdown 中使用原始 HTML 代码。如果设为 false，则会对 HTML 进行转义，可能导致某些 HTML 标签无法正常渲染
    [markup.goldmark.parser]
      attribute = true                                     # 允许在 Markdown 中使用 HTML 属性，如 <p class="my-class"> 这样的属性

  # 代码高亮设置. See https://gohugo.io/content-management/syntax-highlighting/
  [markup.highlight]
    anchorLineNos = true                                   # 为代码块中的行号添加锚点，便于引用特定代码行
    codeFences = true                                      # 开启对代码块（使用三个反引号 ``` 分隔）的支持
    guessSyntax = false                                    # 不自动猜测代码块的语言，建议手动指定语言以获得准确高亮
    hl_Lines = ''                                          # 可以用来设置需要高亮的特定行，目前为空表示不高亮特定行
    hl_inline = false                                      # 不对行内代码进行高亮
    lineAnchors = ''                                       # 允许为每一行代码指定自定义锚点，目前为空
    lineNoStart = 1                                        # 行号从 1 开始计数
    lineNos = true                                         # 开启显示代码块行号
    lineNumbersInTable = true                              # 将行号放在表格中显示，通常使代码布局更整齐
    noHl = false                                           # 不禁用语法高亮
    style = 'friendly'                                     # 指定代码高亮的样式为 “friendly”，你也可以选择其它内置样式
    tabWidth = 4                                           # 设定制表符宽度为 4 个空格
    lineNumbers = true                                     # 开启显示代码块行号